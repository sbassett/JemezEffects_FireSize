FSIM_FireSizeListsAll_WithHeaders <- read.csv("I:/Projects/JemezTreatmentEffectiveness/Data/Interim/FireSimulation/FSimRuns/FSim_ProcessedManually_2021/FSIM_FireSizeListsAll_WithHeaders.csv", stringsAsFactors=TRUE)
View(FSIM_FireSizeListsAll_WithHeaders)
library(ggplot2)
require(ggplot2)
install.packages("ggplot2")
library(ggplot2)
# load fire size list data
FSIM_FireSizeListsAll_WithHeaders <- read.csv("I:/Projects/JemezTreatmentEffectiveness/Data/Interim/FireSimulation/FSimRuns/FSim_ProcessedManually_2021/FSIM_FireSizeListsAll_WithHeaders.csv", stringsAsFactors=TRUE)
# basic violin plot
plotTest1 <- ggplot(FSIM_FireSizeListsAll_WithHeaders, aes(x=Scenario, y=SizeAc)) + geom_violin()
plotTest1
# basic violin plot
plotTest1 <- ggplot(FSIM_FireSizeListsAll_WithHeaders, aes(x=Scenario, y=SizeAc)) + geom_violin(trim=FALSE)
plotTest1
# possible values for trans : 'log2', 'log10','sqrt'
plotTest1 + scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10')
# basic violin plot
plotTest1 <- ggplot(FSIM_FireSizeListsAll_WithHeaders, aes(x=Scenario, y=SizeAc)) + geom_violin(trim=FALSE)
plotTest1
# possible values for trans : 'log2', 'log10','sqrt'
plotTest2 <- plotTest1 + scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10')
plotTest2
# possible values for trans : 'log2', 'log10','sqrt'
plotTest2 <- plotTest1 + scale_y_continuous(trans='log10')
plotTest2
plotTest3 <- plotTest2 + stat_summary(fun.data=mean_sdl, mult=1, geom="pointrange", color="red")
plotTest3
plotTest3 <- plotTest2 + stat_summary(fun.data="mean_sdl", mult=1, geom="crossbar", width=0.2 )
plotTest3 <- plotTest2 + stat_summary(fun.data="mean_sdl", geom="crossbar", width=0.2 )
plotTest3
plotTest3 <- plotTest2 + stat_summary(fun.data="mean_sdl", geom="crossbar", width=0.01 )
plotTest3
plotTest3 <- plotTest2 + stat_summary(fun.data=mean_sdl, mult=1, geom="pointrange", color="red")
plotTest3
plotTest4 <- plotTest3 + scale_y_continuous(trans=pseudo_log_trans(sigma = 1, base = exp(1)))
require("scales")
plotTest4 <- plotTest3 + scale_y_continuous(trans=pseudo_log_trans(sigma = 1, base = exp(1)))
plotTest4
require("scales")
library(ggplot2)
# load fire size list data
FSIM_FireSizeListsAll_WithHeaders <- read.csv("I:/Projects/JemezTreatmentEffectiveness/Data/Interim/FireSimulation/FSimRuns/FSim_ProcessedManually_2021/FSIM_FireSizeListsAll_WithHeaders.csv", stringsAsFactors=TRUE)
# basic violin plot
plotTest1 <- ggplot(FSIM_FireSizeListsAll_WithHeaders, aes(x=Scenario, y=SizeAc)) + geom_violin(trim=FALSE)
plotTest1
# possible values for trans : 'log2', 'log10','sqrt'
plotTest2 <- plotTest1 + scale_y_continuous(trans='log10')
plotTest2
#plotTest3 <- plotTest2 + stat_summary(fun.data=mean_sdl, mult=1, geom="pointrange", color="red")
plotTest3 <- plotTest2 + geom_boxplot(width=0.1)
plotTest3
plotTest4 <- plotTest3 + scale_y_continuous(trans=pseudo_log_trans(sigma = 1, base = exp(1)))
plotTest4
plotTest4 + theme_classic()
# basic violin plot
plotTest1 <- ggplot(FSIM_FireSizeListsAll_WithHeaders, aes(x=Scenario, y=SizeAc)) + geom_violin(fill="gray", trim=FALSE)
plotTest1
# possible values for trans : 'log2', 'log10','sqrt'
plotTest2 <- plotTest1 + scale_y_continuous(trans='log10')
plotTest2
#plotTest3 <- plotTest2 + stat_summary(fun.data=mean_sdl, mult=1, geom="pointrange", color="red")
plotTest3 <- plotTest2 + geom_boxplot(width=0.1)
plotTest3
plotTest4 <- plotTest3 + scale_y_continuous(trans=pseudo_log_trans(sigma = 1, base = exp(1)))
plotTest4 + theme_classic()
jpeg(file="testPlot.jpg", width=1950, height=1200)
plotTest4 + theme_classic()
dev.off()
jpeg(file="testPlot.jpg")
plotTest4 + theme_classic()
dev.off()
plotTest4 + theme_classic() stat_summary(fun.y=mean, geom="point", shape=20, size=14, color="red", fill="red")
plotTest4 + theme_classic() + stat_summary(fun.y=mean, geom="point", shape=20, size=14, color="red", fill="red")
plotTest4 + theme_classic() + stat_summary(fun.y=mean, geom="point", shape=20, size=8, color="red", fill="red")
plotTest4 + theme_classic() + stat_summary(fun.y=mean, geom="point", shape=2, size=8, color="red", fill="red")
plotTest4 + theme_classic() + stat_summary(fun.y=mean, geom="point", shape=1, size=8, color="red", fill="red")
plotTest4 + theme_classic() + stat_summary(fun.y=mean, geom="point", shape=1, size=2, color="red", fill="red")
plotTest4 + theme_classic() + stat_summary(fun.y=mean, geom="point", shape=10, size=2, color="red", fill="red")
plotTest4 + theme_classic() + stat_summary(fun.y=mean, geom="point", shape=20, size=2, color="red", fill="red")
plotTest4 + theme_classic() + stat_summary(fun.y=mean, geom="point", shape=20, size=5, color="red", fill="red")
means <- aggregate(SizeAc ~  Scenario, FSIM_FireSizeListsAll_WithHeaders, mean)
plotTest4 + geom_text(data = means, aes(label = weight, y = weight + 0.08))
plotTest4 + geom_text(data = means, aes(label = SizeAc, y = SizeAc + 0.08))
plotTest4 + stat_summary(fun.y=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc + 0.08))
plotTest4 + stat_summary(fun.y=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc + 0.01))
plotTest4 + stat_summary(fun.y=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc + 0.0001))
require
require
require("scales")
library(ggplot2)
# load fire size list data
FSIM_FireSizeListsAll_WithHeaders <- read.csv("I:/Projects/JemezTreatmentEffectiveness/Data/Interim/FireSimulation/FSimRuns/FSim_ProcessedManually_2021/FSIM_FireSizeListsAll_WithHeaders.csv", stringsAsFactors=TRUE)
# basic violin plot
plotTest1 <- ggplot(FSIM_FireSizeListsAll_WithHeaders, aes(x=Scenario, y=SizeAc)) + geom_violin(fill="gray", trim=FALSE)
plotTest1
# possible values for trans : 'log2', 'log10','sqrt'
plotTest2 <- plotTest1 + scale_y_continuous(trans='log10')
plotTest2
#plotTest3 <- plotTest2 + stat_summary(fun.data=mean_sdl, mult=1, geom="pointrange", color="red")
plotTest3 <- plotTest2 + geom_boxplot(width=0.1)
plotTest3
plotTest4 <- plotTest3 + scale_y_continuous(trans=pseudo_log_trans(sigma = 1, base = exp(1)))
plotTest4 + theme_classic() + stat_summary(fun.y=mean, geom="point", shape=20, size=5, color="red", fill="red")
means <- aggregate(SizeAc ~  Scenario, FSIM_FireSizeListsAll_WithHeaders, mean)
plotTest4 + stat_summary(fun.y=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc + 0.0001))
jpeg(file="testPlot.jpg", width=1950, height=1200)
plotTest4 + stat_summary(fun.y=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc))
plotTest4 <- plotTest3 + scale_y_continuous(trans=pseudo_log_trans(sigma = 1, base = exp(1)))
plotTest4 + theme_classic() + stat_summary(fun.y=mean, geom="point", shape=20, size=5, color="red", fill="red")
means <- aggregate(SizeAc ~  Scenario, FSIM_FireSizeListsAll_WithHeaders, mean)
plotTest4 + stat_summary(fun.y=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc - 50))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc - 50))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc - 500))
plotTest4 + theme_classic() + stat_summary(fun.y=mean, geom="point", shape=20, size=5, color="red", fill="red")
plotTest4 + theme_classic() + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red")
plotTest4 + theme_classic() + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red")
means <- aggregate(SizeAc ~  Scenario, FSIM_FireSizeListsAll_WithHeaders, mean)
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc - 500))
plotTest1
# basic violin plot
plotTest1 <- ggplot(FSIM_FireSizeListsAll_WithHeaders, aes(x=Scenario, y=SizeAc)) + geom_violin(fill="gray", trim=FALSE)
plotTest1
dev.off()
require("scales")
library(ggplot2)
# load fire size list data
FSIM_FireSizeListsAll_WithHeaders <- read.csv("I:/Projects/JemezTreatmentEffectiveness/Data/Interim/FireSimulation/FSimRuns/FSim_ProcessedManually_2021/FSIM_FireSizeListsAll_WithHeaders.csv", stringsAsFactors=TRUE)
# basic violin plot
plotTest1 <- ggplot(FSIM_FireSizeListsAll_WithHeaders, aes(x=Scenario, y=SizeAc)) + geom_violin(fill="gray", trim=FALSE)
plotTest1
# possible values for trans : 'log2', 'log10','sqrt'
plotTest2 <- plotTest1 + scale_y_continuous(trans='log10')
plotTest2
#plotTest3 <- plotTest2 + stat_summary(fun.data=mean_sdl, mult=1, geom="pointrange", color="red")
plotTest3 <- plotTest2 + geom_boxplot(width=0.1)
plotTest3
plotTest4 <- plotTest3 + scale_y_continuous(trans=pseudo_log_trans(sigma = 1, base = exp(1)))
plotTest4 + theme_classic() + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red")
means <- aggregate(SizeAc ~  Scenario, FSIM_FireSizeListsAll_WithHeaders, mean)
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc - 500))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc + 500))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc + 5000))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc + 5))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc - 50000))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc - 5000))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc - 500))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc - 900))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc - 2000))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc * 0.5))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc * 0.25))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc * 0.15))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc * 0.08))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc * 0.05))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc * 0.05, format(big.mark",")))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc * 0.05, format(big.mark = ",")))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc * 0.05, format(y, big.mark = ",")))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = SizeAc, y = SizeAc * 0.05))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = scales::comma(SizeAc), y = SizeAc * 0.05))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = scales::comma_format(SizeAc), y = SizeAc * 0.05))
plotTest4 + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red") + geom_text(data = means, aes(label = scales::comma(SizeAc), y = SizeAc * 0.05))
plotTest4 + stat_summary(fun=mean, geom="point", shape=16, size=5, color="red", fill="red") + geom_text(data = means, aes(label = scales::comma(SizeAc), y = SizeAc * 0.05))
plotTest4 + stat_summary(fun=mean, geom="point", shape=16, size=3, color="red", fill="red") + geom_text(data = means, aes(label = scales::comma(SizeAc), y = SizeAc * 0.05))
plotTest4 + stat_summary(fun=mean, geom="point", shape=18, size=3, color="red", fill="red") + geom_text(data = means, aes(label = scales::comma(SizeAc), y = SizeAc * 0.05))
plotTest4 + stat_summary(fun=mean, geom="point", shape=18, size=5, color="red", fill="red") + geom_text(data = means, aes(label = scales::comma(SizeAc), y = SizeAc * 0.05))
plotTest4 + stat_summary(fun=mean, geom="point", shape=18, size=5, color="red", fill="red") + geom_text(data = means, aes(label = scales::comma(SizeAc), y = SizeAc * 0.06))
plotTest4 + stat_summary(fun=mean, geom="point", shape=18, size=5, color="red", fill="red") + geom_text(data = means, aes(label = scales::comma(SizeAc), y = SizeAc * 0.055))
plotTest4 + stat_summary(fun=mean, geom="point", shape=18, size=5, color="red", fill="red") + geom_text(data = means + " ac", aes(label = scales::comma(SizeAc), y = SizeAc * 0.055))
plotTest4 + stat_summary(fun=mean, geom="point", shape=18, size=5, color="red", fill="red") + geom_text(data = means & " ac", aes(label = scales::comma(SizeAc), y = SizeAc * 0.055))
plotTest4 + stat_summary(fun=mean, geom="point", shape=18, size=5, color="red", fill="red") + geom_text(data = means, aes(label = scales::comma(SizeAc), y = SizeAc * 0.055))
aveAnnualBurnedArea <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, FUN = sum/10,000)
aveAnnualBurnedArea <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, FUN = (sum)/10,000)
totalBurnedArea <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, FUN = sum)
totalBurnedArea
aveAnnualBurnedArea
aveAnnualBurnedArea <- totalBurnedArea/10000
aveAnnualBurnedArea
aveAnnualBurnedArea <- totalBurnedArea[1]/10000
totalBurnedArea$aveAnnualBurnedArea <- totalBurnedArea$SizeAc/10000
totalBurnedArea
### average annual probability of a fire over 100,000 acres
# Count of fires that grew to over 100,000 acres divided by 10,000 for each scenario.
totalMegafires <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, FUN = sum(FSIM_FireSizeListsAll_WithHeaders$SizeAc >= 100000, na.rm=TRUE)
totalMegafires
### average annual probability of a fire over 100,000 acres
# Count of fires that grew to over 100,000 acres divided by 10,000 for each scenario.
totalMegafires <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, FUN = sum(FSIM_FireSizeListsAll_WithHeaders$SizeAc >= 100000, na.rm=TRUE))))
### average annual probability of a fire over 100,000 acres
# Count of fires that grew to over 100,000 acres divided by 10,000 for each scenario.
totalMegafires <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, FUN = sum(FSIM_FireSizeListsAll_WithHeaders$SizeAc >= 100000, na.rm=TRUE))
### average annual probability of a fire over 100,000 acres
# Count of fires that grew to over 100,000 acres divided by 10,000 for each scenario.
totalMegafires <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, sum(FSIM_FireSizeListsAll_WithHeaders$SizeAc >= 100000, na.rm=TRUE))
totalMegafires
### average annual probability of a fire over 100,000 acres
# Count of fires that grew to over 100,000 acres divided by 10,000 for each scenario.
totalMegafires <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, sum(FSIM_FireSizeListsAll_WithHeaders$SizeAc >= 100000, na.rm=TRUE))
with( FSIM_FireSizeListsAll_WithHeaders[FSIM_FireSizeListsAll_WithHeaders$SizeAc >= 100000,], table(Scenario) )
totalMegafire <- with( FSIM_FireSizeListsAll_WithHeaders[FSIM_FireSizeListsAll_WithHeaders$SizeAc >= 100000,], table(Scenario) )
averageAnnualMegaFires <- totalMegafire/10000
averageAnnualMegaFires
fireSizeStats <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, FUN = summary(FSIM_FireSizeListsAll_WithHeaders$SizeAc))
fireSizeStats <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, FUN = summary())
fireSizeStats <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, FUN = summary(SizeAc))
fireSizeStats <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, FUN = summary(fireSizeStats$SizeAc))
fireSizeStats <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, summary)
fireSizeStats
aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, mode)
#function to find the mode from https://stackoverflow.com/a/25635740
Mode <- function(x, na.rm = FALSE) {
if(na.rm){
x = x[!is.na(x)]
}
ux <- unique(x)
return(ux[which.max(tabulate(match(x, ux)))])
}
aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, FUN = Mode)
# load fire size list data
FSIM_FireSizeListsAll_WithHeaders <- read.csv("data/FSIM_FireSizeListsAll_WithHeaders.csv", stringsAsFactors=TRUE)
# basic violin plot
plotTest1 <- ggplot(FSIM_FireSizeListsAll_WithHeaders, aes(x=Scenario, y=SizeAc)) + geom_violin(fill="gray", trim=FALSE)
plotTest1
# possible values for trans : 'log2', 'log10','sqrt'
plotTest2 <- plotTest1 + scale_y_continuous(trans='log10')
plotTest2
#plotTest3 <- plotTest2 + stat_summary(fun.data=mean_sdl, mult=1, geom="pointrange", color="red")
plotTest3 <- plotTest2 + geom_boxplot(width=0.1)
plotTest3
plotTest4 <- plotTest3 + scale_y_continuous(trans=pseudo_log_trans(sigma = 1, base = exp(1)))
plotTest4 + theme_classic() + stat_summary(fun=mean, geom="point", shape=20, size=5, color="red", fill="red")
means <- aggregate(SizeAc ~  Scenario, FSIM_FireSizeListsAll_WithHeaders, mean)
plotTest4 + stat_summary(fun=mean, geom="point", shape=18, size=5, color="red", fill="red") + geom_text(data = means, aes(label = scales::comma(SizeAc), y = SizeAc * 0.055))
totalBurnedArea <- aggregate(SizeAc ~ Scenario, FSIM_FireSizeListsAll_WithHeaders, FUN = sum)
